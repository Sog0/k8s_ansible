- name: Read machine list into variable
  ansible.builtin.slurp:
    src: /root/machines.txt
  register: machines_file

- name: Parse machine lines
  set_fact:
    machines: "{{ machines_file['content'] | b64decode | split('\n') }}"

- name: Set titles for contexts list variable
  set_fact:
    configs:
      - node-0
      - node-1
      - admin
      - kube-proxy
      - kube-scheduler
      - kube-controller-manager

- name: Ensure kube-proxy directory exists
  file:
    path: "/var/lib/kube-proxy/"
    state: directory
    mode: '0755'
    recurse: yes
  delegate_to: "{{ item.split()[0] }}"
  loop: "{{ machines[1:3] }}"

#---------------------CERTS and KEYS-----------------------

- name: Generate kube private key on server
  ansible.builtin.command:
    cmd: openssl genrsa -out /root/{{ item }}.key 4096
  delegate_to: '{{ machines[0].split()[0] }}'
  loop: '{{ configs[2:] }}' 

- name: Generate kube private key on server
  ansible.builtin.command:
    cmd: >
      openssl req -new -key "/root/{{ item }}.key" -sha256
      -config "/root/kubernetes-the-hard-way/ca.conf" -section {{ item }}
      -out "/root/{{ item }}.csr"
  delegate_to: '{{ machines[0].split()[0] }}'
  loop: '{{ configs[2:] }}' 

- name: Generate kube certificate on server
  ansible.builtin.command:
    cmd: >
      openssl x509 -req -days 3653 -in "/root/{{ item }}.csr"
      -copy_extensions copyall
      -sha256 -CA "/var/lib/kubelet/ca.crt"
      -CAkey "/root/ca.key"
      -CAcreateserial
      -out "/root/{{ item }}.crt"

  delegate_to: '{{ machines[0].split()[0] }}'
  loop: '{{ configs[2:] }}'    


#---------------------KUBE CONFIG on WORKERS-----------------------

- name: Generate kubeconfig of kubelet/kubeconfig for worker nodes
  ansible.builtin.command:
    cmd: >
      kubectl config set-cluster kubernetes-the-hard-way
      --certificate-authority=/var/lib/kubelet/ca.crt
      --embed-certs=true
      --server=https://server.kubernetes.local:6443
      --kubeconfig=/var/lib/kubelet/kubeconfig
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'

- name: Set credentials of kubelet/kubeconfig for worker nodes
  ansible.builtin.command:
    cmd: >
      kubectl config set-credentials system:node:{{ item.split()[2] }}
        --client-certificate=/var/lib/kubelet/kubelet.crt
        --client-key=/var/lib/kubelet/kubelet.key
        --embed-certs=true
        --kubeconfig=/var/lib/kubelet/kubeconfig
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'

- name: Set context of kubelet/kubeconfig for worker nodes
  ansible.builtin.command:
    cmd: >
        kubectl config set-context default
        --cluster=kubernetes-the-hard-way
        --user=system:node:{{ item.split()[2] }}
        --kubeconfig=/var/lib/kubelet/kubeconfig
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'

- name: Use content context for all
  ansible.builtin.command:
    cmd: >
      kubectl config use-context default
      --kubeconfig=/var/lib/kubelet/kubeconfig
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'

#---------------------KUBE PROXY on WORKERS-----------------------

- name: Generate kubeproxy private key
  ansible.builtin.command:
    cmd: openssl genrsa -out /root/kubeproxy.key 4096
  args:
    creates: /root/kubeproxy.key
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}' 

- name: Generate kubeproxy certificate
  ansible.builtin.command:
    cmd: >
      openssl req -x509 -new -sha512 -noenc
      -key /root/kubeproxy.key
      -days 3653
      -config /root/ca.conf
      -out /root/kubeproxy.crt
  args:
    creates: /root/kubeproxy.crt
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'  

- name: Generate kubeconfig of kubeproxy for worker nodes
  ansible.builtin.command:
    cmd: >
      kubectl config set-cluster kubernetes-the-hard-way
      --certificate-authority=/var/lib/kubelet/ca.crt
      --embed-certs=true
      --server=https://server.kubernetes.local:6443
      --kubeconfig=/var/lib/kube-proxy/kubeconfig
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'

- name: Set credentials of kubeproxy for worker nodes
  ansible.builtin.command:
    cmd: >
      kubectl config set-credentials system:kubeproxy
        --client-certificate=/root/kubeproxy.crt
        --client-key=/root/kubeproxy.key
        --embed-certs=true
        --kubeconfig=/var/lib/kube-proxy/kubeconfig
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'

- name: Set context of kubeproxy for worker nodes
  ansible.builtin.command:
    cmd: >
        kubectl config set-context default
        --cluster=kubernetes-the-hard-way
        --user=system:kubeproxy
        --kubeconfig=/var/lib/kube-proxy/kubeconfig
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'

- name: Use content context for all
  ansible.builtin.command:
    cmd: >
      kubectl config use-context default
      --kubeconfig=/var/lib/kube-proxy/kubeconfig
  delegate_to: '{{ item.split()[0] }}'
  loop: '{{ machines[1:3] }}'

#---------------------COPY CONFIGS-----------------------

- name: Generate kubeconfig for server
  ansible.builtin.command:
    cmd: >
      kubectl config set-cluster kubernetes-the-hard-way
      --certificate-authority=/var/lib/kubelet/ca.crt
      --embed-certs=true
      --server=https://server.kubernetes.local:6443
      --kubeconfig=/root/{{ item }}.kubeconfig
  delegate_to: '{{ machines[0].split()[0] }}'
  loop: '{{ configs[2:] }}'

- name: Set credentials for admin
  ansible.builtin.command:
    cmd: >
      kubectl config set-credentials admin
        --client-certificate=/root/admin.crt
        --client-key=/root/admin.key
        --embed-certs=true
        --kubeconfig=/root/admin.kubeconfig
  delegate_to: '{{ machines[0].split()[0] }}'

- name: Set credentials for kube
  ansible.builtin.command:
    cmd: >
      kubectl config set-credentials system:{{ item }}
        --client-certificate=/root/{{ item }}.crt
        --client-key=/root/{{ item }}.key
        --embed-certs=true
        --kubeconfig=/root/{{ item }}.kubeconfig
  delegate_to: '{{ machines[0].split()[0] }}'
  loop: '{{ configs[3:] }}'
  
- name: Set context for admin
  ansible.builtin.command:
    cmd: >
        kubectl config set-context default
        --cluster=kubernetes-the-hard-way
        --user=admin
        --kubeconfig=/root/admin.kubeconfig
  delegate_to: '{{ machines[0].split()[0] }}'

- name: Set context for kube
  ansible.builtin.command:
    cmd: >
        kubectl config set-context default
        --cluster=kubernetes-the-hard-way
        --user=system:{{ item }}
        --kubeconfig=/root/{{ item }}.kubeconfig
  delegate_to: '{{ machines[0].split()[0] }}'
  loop: '{{ configs[3:] }}'

- name: Use content context for all
  ansible.builtin.command:
    cmd: >
      kubectl config use-context default
      --kubeconfig=/root/{{ item }}.kubeconfig
  delegate_to: '{{ machines[0].split()[0] }}'
  loop: '{{ configs[2:] }}'