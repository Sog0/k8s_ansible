- name: Read machine list into variable
  ansible.builtin.slurp:
    src: /root/machines.txt
  register: machines_file

- name: Parse machine lines
  set_fact:
    machines: "{{ machines_file['content'] | b64decode | split('\n') }}"

- name: Copy 10-bridge.conf to root
  copy:
    src: "/root/kubernetes-the-hard-way/configs/10-bridge.conf"
    dest: "/root/10-bridge.conf"
    remote_src: yes
  delegate_to: "{{ item }}"
  loop: "{{ hosts[2:] }}"

- name: Configure 10-bridge.conf
  replace:
    regexp: "SUBNET"
    path: /root/10-bridge.conf
    replace: "{{ item.split()[3] }}"
  delegate_to: "{{ item.split()[0] }}"
  loop: "{{ machines[1:3] }}"

- name: Install socat
  apt:
    name: socat
    state: present
    update_cache: yes
  delegate_to: "{{ item }}"
  become: true
  loop: "{{ hosts[2:] }}"

- name: Install conntrack 
  apt:
    name: conntrack 
    state: present
    update_cache: yes
  delegate_to: "{{ item }}"
  become: true
  loop: "{{ hosts[2:] }}"

- name: Install ipset 
  apt:
    name: ipset 
    state: present
    update_cache: yes
  delegate_to: "{{ item }}"
  become: true
  loop: "{{ hosts[2:] }}"

- name: Install kmod
  apt:
    name: kmod
    state: present
    update_cache: yes
  delegate_to: "{{ item }}"
  become: true
  loop: "{{ hosts[2:] }}"

- name: Ensure directories exists on node-0
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    recurse: yes
  delegate_to: "{{ hosts[2] }}"
  loop:
    - '/etc/cni/net.d'
    - '/opt/cni/bin'
    - '/var/lib/kubelet'
    - '/var/lib/kube-proxy'
    - '/var/lib/kubernetes'
    - '/var/run/kubernetes'

- name: Ensure directories exists on node-1
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    recurse: yes
  delegate_to: "{{ hosts[3] }}"
  loop:
    - '/etc/cni/net.d'
    - '/opt/cni/bin'
    - '/var/lib/kubelet'
    - '/var/lib/kube-proxy'
    - '/var/lib/kubernetes'
    - '/var/run/kubernetes'

- name: Install the worker binaries on node-0
  copy:
    remote_src: yes
    src: "/root/kubernetes-the-hard-way/downloads/worker/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: '0755'
  delegate_to: '{{ hosts[2] }}'
  loop:
    - 'crictl'
    - 'kube-proxy'
    - 'kubelet'
    - 'runc'

- name: Install the wroker binaries on node-1
  copy:
    remote_src: yes
    src: "/root/kubernetes-the-hard-way/downloads/worker/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: '0755'
  delegate_to: '{{ hosts[3] }}'
  loop:
    - 'crictl'
    - 'kube-proxy'
    - 'kubelet'
    - 'runc'

- name: Install containerd binaries on node-0
  copy:
    remote_src: yes
    src: "/root/kubernetes-the-hard-way/downloads/worker/{{ item }}"
    dest: "/bin/{{ item }}"
    mode: '0755'
  delegate_to: '{{ hosts[2] }}'
  loop:
    - 'containerd'
    - 'containerd-shim-runc-v2'
    - 'containerd-stress'
  
- name: Install containerd binaries on node-1
  copy:
    remote_src: yes
    src: "/root/kubernetes-the-hard-way/downloads/worker/{{ item }}"
    dest: "/bin/{{ item }}"
    mode: '0755'
  delegate_to: '{{ hosts[3] }}'
  loop:
    - 'containerd'
    - 'containerd-shim-runc-v2'
    - 'containerd-stress'

- name: Instal cni-plugins on node-0
  copy:
    remote_src: yes
    src: "/root/kubernetes-the-hard-way/downloads/cni-plugins/"
    dest: "/opt/cni/bin/"
    mode: '0755'
  delegate_to: '{{ hosts[2] }}'

- name: Instal cni-plugins on node-1
  copy:
    remote_src: yes
    src: "/root/kubernetes-the-hard-way/downloads/cni-plugins/"
    dest: "/opt/cni/bin/"
    mode: '0755'
  delegate_to: '{{ hosts[3] }}'

- name: Move 10-bridge.conf to /etc/cni/net.d/
  copy:
    src: "/root/10-bridge.conf"
    dest: "/etc/cni/net.d/10-bridge.conf"
    remote_src: yes
  delegate_to: "{{ item }}"
  loop: "{{ hosts[2:] }}"

- name: Move 99-loopback.conf to /etc/cni/net.d/
  copy:
    src: "/root/kubernetes-the-hard-way/configs/99-loopback.conf"
    dest: "/etc/cni/net.d/99-loopback.conf"
    remote_src: yes
  delegate_to: "{{ item }}"
  loop: "{{ hosts[2:] }}"

- name: Load br_netfilter module with Ansible modprobe
  community.general.modprobe:
    name: br_netfilter
    state: present
  delegate_to: "{{ item }}"
  loop: "{{ hosts[2:] }}"

- name: Add net.bridge.bridge-nf-call-iptables sysctl setting on node-0
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    line: "{{ item.line }}"
    create: yes
  delegate_to: "{{ hosts[2] }}"
  loop:
    - {line: 'net.bridge.bridge-nf-call-iptables = 1', path: '/etc/sysctl.d/kubernetes.conf'}
    - {line: 'net.bridge.bridge-nf-call-ip6tables = 1', path: '/etc/sysctl.d/kubernetes.conf'}
    - {line: 'br-netfilter', path: '/etc/modules-load.d/modules.conf'}

- name: Add net.bridge.bridge-nf-call-iptables sysctl setting on node-1
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    line: "{{ item.line }}"
    create: yes
  delegate_to: "{{ hosts[3] }}"
  loop:
    - {line: 'net.bridge.bridge-nf-call-iptables = 1', path: '/etc/sysctl.d/kubernetes.conf'}
    - {line: 'net.bridge.bridge-nf-call-ip6tables = 1', path: '/etc/sysctl.d/kubernetes.conf'}
    - {line: 'br-netfilter', path: '/etc/modules-load.d/modules.conf'}

- name: Apply sysctl settings from kubernetes.conf
  ansible.builtin.command: sysctl -p /etc/sysctl.d/kubernetes.conf
  delegate_to: "{{ item }}"
  loop: "{{ hosts[2:] }}"

- name: Ensure directories exists on node-0
  file:
    path: "/etc/containerd/"
    state: directory
    mode: '0755'
    recurse: yes
  delegate_to: "{{ item }}"
  loop: "{{ hosts[2:] }}"

- name: Configure someting on node-0
  copy:
    remote_src: yes
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0755'
  delegate_to: '{{ hosts[2] }}'
  loop:
    - {src: '/root/kubernetes-the-hard-way/configs/containerd-config.toml', dest: '/etc/containerd/config.toml'}
    - {src: '/root/kubernetes-the-hard-way/units/containerd.service', dest: '/etc/systemd/system/containerd.service'}
    - {src: '/root/kubernetes-the-hard-way/configs/kubelet-config.yaml', dest: '/var/lib/kubelet/kubelet-config.yaml'}
    - {src: '/root/kubernetes-the-hard-way/units/kubelet.service', dest: '/etc/systemd/system/kubelet.service'}
    - {src: '/root/kubernetes-the-hard-way/configs/kube-proxy-config.yaml', dest: '/var/lib/kube-proxy/kube-proxy-config.yaml'}
    - {src: '/root/kubernetes-the-hard-way/units/kube-proxy.service', dest: '/etc/systemd/system/kube-proxy.service'}
  
- name: Configure someting on node-1
  copy:
    remote_src: yes
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0755'
  delegate_to: '{{ hosts[3] }}'
  loop:
    - {src: '/root/kubernetes-the-hard-way/configs/containerd-config.toml', dest: '/etc/containerd/config.toml'}
    - {src: '/root/kubernetes-the-hard-way/units/containerd.service', dest: '/etc/systemd/system/containerd.service'}
    - {src: '/root/kubernetes-the-hard-way/configs/kubelet-config.yaml', dest: '/var/lib/kubelet/kubelet-config.yaml'}
    - {src: '/root/kubernetes-the-hard-way/units/kubelet.service', dest: '/etc/systemd/system/kubelet.service'}
    - {src: '/root/kubernetes-the-hard-way/configs/kube-proxy-config.yaml', dest: '/var/lib/kube-proxy/kube-proxy-config.yaml'}
    - {src: '/root/kubernetes-the-hard-way/units/kube-proxy.service', dest: '/etc/systemd/system/kube-proxy.service'}

- name: Restart systemd configuration
  ansible.builtin.systemd:
    daemon_reload: true
  delegate_to: '{{ item }}'
  loop: '{{ hosts[2:] }}'

- name: Enable kube services on node-0
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
  delegate_to: '{{ hosts[2] }}'
  loop:
  - 'containerd'
  - 'kubelet'
  - 'kube-proxy'

- name: Enable kube services on node-1
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
  delegate_to: '{{ hosts[3] }}'
  loop:
  - 'containerd'
  - 'kubelet'
  - 'kube-proxy'

- name: Start kube services on node-0
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
  delegate_to: '{{ hosts[2] }}'
  loop:
  - 'containerd'
  - 'kubelet'
  - 'kube-proxy'

- name: Start kube services on node-1
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
  delegate_to: '{{ hosts[3] }}'
  loop:
  - 'containerd'
  - 'kubelet'
  - 'kube-proxy'

- name: Check if kubelet is active
  ansible.builtin.command: systemctl is-active kubelet
  register: kubelet_status
  delegate_to: '{{ hosts[2] }}'

- name: Show kube-apiserver is active
  ansible.builtin.debug:
    var: kubelet_status.stdout_lines